/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
	id 'jacoco'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

// Copy the Java modules, run script and JAR in the distribution directory
tasks.register("copyDistribution", Copy) {
    from configurations.runtimeClasspath
    from tasks.named('jar')
    from layout.projectDirectory.file('assets/run.sh')
    into layout.buildDirectory.dir('distribution')
}
tasks.named("build") {
    dependsOn("copyDistribution")
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava

	// These are for pi4j
    implementation 'org.slf4j:slf4j-api:2.0.16'
    implementation 'org.slf4j:slf4j-simple:2.0.16'
    implementation 'com.pi4j:pi4j-core:2.7.0'
    implementation 'com.pi4j:pi4j-plugin-raspberrypi:2.7.0'
    implementation 'com.pi4j:pi4j-plugin-gpiod:2.7.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'app.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

javafx {
    version = "23.0.1"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.media' ]
}
